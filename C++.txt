생활코딩
//OOP
- 기능성을 가진 언어의 특성
- procedural programming : 명령이 확실하게 실행, function, 루틴, 서브루틴 
- 위에서 OOP가 생성됨, Object Oriented programming
- 2가지를 가르는 차이는 함수와 객체가 존재함 

//객체 특징
- 로직을 그룹핑해 변수와 메소드와 함께 활용험 
- 부품화 : 재활용 가능하도록 부품화  

- 치팅 페이퍼 한장 가능 
---------------------------------------------------------------------------------------------
LEC 1
//C는 
- 컴파일기능 : 0 또는 1로 변환해 컴퓨터가 읽을 수 있도록 함 
- 하이레벨(하기 쉬움, 파이썬) 로우레벨(C 계산 자원과 메모리 최소한 사용)
- 윈도우 리눅스등 다양한 OS에서 가능, 만국 공통어

- C는 동사에 집중, 함수를 통해 절차 지향적 코딩을 사용함
- 프로그램 크기가 커지자 명사인 사람, 나무를 객체로 만들어 객체간 커뮤니케이션 시도
- C++ 는 C의 장점을 흡수하고 객체 지향이 가능하게 만듦
- 앱, OS, Generic Programming, 코딩 효율이 좋아짐, 

//Editor 
- 에디터 : 코드를 편집할 수 있는 프로그램(아레아 한글, 워드 등)
- 컴파일러 : 코드를 실행 가능하도록 만들어줌, 컴퓨터가 읽을 수 있는 실행 파일 만들기
- 프리프로세서&링커 : 개체나 함수 통합, 
    결과를 그래픽 카드로 출력하는 등의 컴퓨터 내부 처리함수, 읽어보세요 

//Debug
- 오래걸림
---------------------------------------------------------------------------------------------
LEC2 
//변수 
- 다른 프로그래머가 재사용한다고 생각하고 이름을 지음 

************
- 규칙 : 적어도 한글자, 첫 글자는 알파벳 또는 _(숫자 안됨), 나머지 글자 특수 기호 안됨 

//Case_Sensitive
- 대문자, 소문자를 구별함 
- C++이 사전 예약한 용어는 사용 불가(for, if/ reserved word
************

//문법
- 반드시 세미콜론, 
- 솔루션 : 시스템의 덩어리(패키지)  

//int
- 1바이트 8비트, 하나의 비트는 0또는 1 
- 4바이트 -20억부터 20억 
- 메모리가 굉장히 작을 떄 정수 하나에 short 를 줌 
- 길 경우에는 long long 을 씀 
- unsigned 0~650000으로 양수밖에 못 쓰지만 범위가 늘어남, 부호를 쓰지 않는다.

// 1줄 주석
- 절대 인식X,
- /* */는 여러줄 주석

//헝가리안 표기 
- 전설적인 프로그래머 short int siX; 

//Floating Point 
- float, double, long double, 
- 플로팅 바이트 구조에서 처음에 sign + expornent(10의 제곱승) + mentisa(실제 숫자)

//character 
- 문자를 저장하는 변수 

//named constant
- 상수, 선언 시 절대 바뀌지 않음 

//stream 
- cout 컴퓨터로부터 나감 
- cin 컴퓨터에 들어옴  
---------------------------------------------------------------------------------------------